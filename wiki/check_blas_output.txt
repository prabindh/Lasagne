C:\Users\psundareson\TOOLS\WinPython-64bit-3.4.4.3>python ..\check_blas.py
Using gpu device 0: Quadro M1000M (CNMeM is disabled, cuDNN 5005)
        Some results that you can compare against. They were 10 executions
        of gemm in float64 with matrices of shape 2000x2000 (M=N=K=2000).
        All memory layout was in C order.
        CPU tested: Xeon E5345(2.33Ghz, 8M L2 cache, 1333Mhz FSB),
                    Xeon E5430(2.66Ghz, 12M L2 cache, 1333Mhz FSB),
                    Xeon E5450(3Ghz, 12M L2 cache, 1333Mhz FSB),
                    Xeon X5560(2.8Ghz, 12M L2 cache, hyper-threads?)
                    Core 2 E8500, Core i7 930(2.8Ghz, hyper-threads enabled),
                    Core i7 950(3.07GHz, hyper-threads enabled)
                    Xeon X5550(2.67GHz, 8M l2 cache?, hyper-threads enabled)
        Libraries tested:
            * numpy with ATLAS from distribution (FC9) package (1 thread)
            * manually compiled numpy and ATLAS with 2 threads
            * goto 1.26 with 1, 2, 4 and 8 threads
            * goto2 1.13 compiled with multiple threads enabled
                          Xeon   Xeon   Xeon  Core2 i7    i7     Xeon   Xeon
        lib/nb threads    E5345  E5430  E5450 E8500 930   950    X5560  X5550
        numpy 1.3.0 blas                                                775.92s
        numpy_FC9_atlas/1 39.2s  35.0s  30.7s 29.6s 21.5s 19.60s
        goto/1            18.7s  16.1s  14.2s 13.7s 16.1s 14.67s
        numpy_MAN_atlas/2 12.0s  11.6s  10.2s  9.2s  9.0s
        goto/2             9.5s   8.1s   7.1s  7.3s  8.1s  7.4s
        goto/4             4.9s   4.4s   3.7s  -     4.1s  3.8s
        goto/8             2.7s   2.4s   2.0s  -     4.1s  3.8s
        openblas/1                                        14.04s
        openblas/2                                         7.16s
        openblas/4                                         3.71s
        openblas/8                                         3.70s
        mkl 11.0.083/1            7.97s
        mkl 10.2.2.025/1                                         13.7s
        mkl 10.2.2.025/2                                          7.6s
        mkl 10.2.2.025/4                                          4.0s
        mkl 10.2.2.025/8                                          2.0s
        goto2 1.13/1                                                     14.37s
        goto2 1.13/2                                                      7.26s
        goto2 1.13/4                                                      3.70s
        goto2 1.13/8                                                      1.94s
        goto2 1.13/16                                                     3.16s
        Test time in float32
        cuda version      6.5    6.0    5.5    5.0    4.2    4.1    4.0    3.2    3.0   # note
        gpu
        K6000/NOECC       0.06s         0.06s
        K40                             0.07s
        K20m/ECC          0.08s 0.08s          0.07s
        K20/NOECC                              0.07s
        M2090                           0.19s
        C2075                                         0.25s
        M2075                                  0.25s
        M2070                                  0.25s         0.27s         0.32s
        M2070-Q                                0.48s         0.27s         0.32s
        M2050(Amazon)                          0.25s
        C1060                                                              0.46s
        K600                            1.04s
        GTX Titan Black                 0.05s
        GTX Titan(D15U-50)              0.06s  0.06s  don't work
        GTX 780                         0.06s
        GTX 980           0.06s
        GTX 970           0.08s
        GTX 680                         0.11s  0.12s  0.154s               0.218s
        GRID K520         0.14s
        GTX 580                         0.16s  0.16s  0.164s               0.203s
        GTX 480                         0.19s  0.19s  0.192s               0.237s 0.27s
        GTX 750 Ti        0.20s
        GTX 470                         0.23s  0.23s  0.238s               0.297s 0.34s
        GTX 660                         0.18s  0.20s  0.23s
        GTX 560                                       0.30s
        GTX 650 Ti                             0.27s
        GTX 765M                 0.27s
        GTX 460                                0.37s                0.45s
        GTX 285                         0.42s         0.452s        0.452s        0.40s # cuda 3.0 seems faster? driver version?
        750M                                   0.49s
        GT 610            2.38s
        GTX 550 Ti                                                  0.57s
        GT 520                                        2.68s                3.06s
        GT 520M                                2.44s                       3.19s        # with bumblebee on Ubuntu 12.04
        GT 220                                                             3.80s
        GT 210                                                      6.35s
        8500 GT                                                                   10.68s
        Results for larger matrices.
        There were 10 executions of gemm in float32
        with matrices of shape 5000x5000 (M=N=K=5000).
        All memory layout was in C order.
        cuda version      7.5    7.0    6.5
        gpu
        M40               0.47s
        k80               0.96s
        K6000/NOECC              0.69s
        K40                             0.88s
        K20m/ECC
        K20/NOECC
        M2090
        C2075
        M2075
        M2070
        M2070-Q
        M2050(Amazon)
        C1060
        K600
        GTX Titan X       0.45s  0.47s
        GTX Titan Black   0.64s  0.64s
        GTX Titan(D15U-50)
        GTX 780
        GTX 980 Ti        0.41s
        GTX 980
        GTX 970           0.66s
        GTX 680                  1.57s
        GRID K520
        GTX 750 Ti        2.01s  2.01s
        GTX 750           2.46s  2.37s
        GTX 660           2.32s  2.32s
        GTX 580           2.42s         2.47s
        GTX 480           2.87s         2.88s
        TX1                      7.6s (float32 storage and computation)
        GT 610                   33.5s
Some Theano flags:
    blas.ldflags=
    compiledir= C:\Users\psundareson\AppData\Local\Theano\compiledir_Windows-10-10.0.10586-Intel64_Family_6_Model_94_Stepping_3_GenuineIntel-3.4.4-64
    floatX= float32
    device= gpu
Some OS information:
    sys.platform= win32
    sys.version= 3.4.4 (v3.4.4:737efcadf5a6, Dec 20 2015, 20:20:57) [MSC v.1600 64 bit (AMD64)]
    sys.prefix= C:\Users\psundareson\TOOLS\WinPython-64bit-3.4.4.3\scripts\..\python-3.4.4.amd64
Some environment variables:
    MKL_NUM_THREADS= None
    OMP_NUM_THREADS= None
    GOTO_NUM_THREADS= None
Numpy config: (used when the Theano flag "blas.ldflags" is empty)
blas_mkl_info:
    library_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/intel64_win']
    include_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include']
    libraries = ['mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt']
    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]
blas_opt_info:
    library_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/intel64_win']
    include_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include']
    libraries = ['mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt']
    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]
lapack_mkl_info:
    library_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/intel64_win']
    include_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include']
    libraries = ['mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt', 'mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt']
    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]
lapack_opt_info:
    library_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/intel64_win']
    include_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include']
    libraries = ['mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt', 'mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt']
    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]
mkl_info:
    library_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/intel64_win']
    include_dirs = ['C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include']
    libraries = ['mkl_lapack95_lp64', 'mkl_blas95_lp64', 'mkl_rt']
    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]
openblas_lapack_info:
  NOT AVAILABLE
Numpy dot module: numpy.core.multiarray
Numpy location: C:\Users\psundareson\TOOLS\WinPython-64bit-3.4.4.3\python-3.4.4.amd64\lib\site-packages\numpy\__init__.py
Numpy version: 1.11.1
nvcc version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2016 NVIDIA Corporation
Built on Wed_May__4_21:03:03_CDT_2016
Cuda compilation tools, release 8.0, V8.0.26
We executed 10 calls to gemm with a and b matrices of shapes (5000, 5000) and (5000, 5000).
Total execution time: 2.15s on GPU.
Try to run this script a few times. Experience shows that the first time is not as fast as followings calls. The difference is not big, but consistent.
C:\Users\psundareson\TOOLS\WinPython-64bit-3.4.4.3>
